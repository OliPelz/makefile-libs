#!/usr/bin/env bash
#
# the whole thing starts here
# this script acts as a gatekeeper to test and check VERY mandantory definitions
# before anything else can be started
#
# after running this script we can be assured that all mandantory stuff is defined
# and we dont need to do those checks in all later scripts for it anymore :)
#
# some helper functions


#########################################################################################################
## importing section
#########################################################################################################

temp_test_env_variable_defined() {
        ARG=$1
        CMD='test -z ${'$ARG'+x}'
        if eval $CMD;
        then
                return 1 # variable is not defined or empty string
        else
                return 0  # variable is set
        fi
}
has_errors=false
# first check before sourcing
if ! temp_test_env_variable_defined THIS_REPO_FULL_PATH; then
    abort_color="\033[1;95m" # same as in my colored.sh file for ABORT log event
    echo -e "${abort_color}[ABORT]\033[0m check failed, mandantory environment variable THIS_REPO_FULL_PATH is not defined, bailing out"
	has_error=true
	exit 1
fi
# now source our external functions
source ${THIS_REPO_FULL_PATH}/external-deps/utility-scripts/build/__full-source.bash

log_info2 ">>> PROCESSING 0000_starthere_gatekeeper.sh"

#########################################################################################################
## now we can use all my external functions
#########################################################################################################


# first check for all mandantory EXTERNALLY defined env variables we need to set 
# before running the pipeline
if ! test_env_variable_defined PROVISIONING_CONFIG_FULL_PATH; then
	log_error "check failed, mandantory environment variable PROVISIONING_CONFIG_FULL_PATH is not defined, bailing out"
	has_error=true
fi


export DISABLE_PROXY=${DISABLE_PROXY:-false}
if [ "${DISABLE_PROXY}" == "true" ]
then
  log_info "proxy for box DISABLED, to enable use DISABLE_PROXY=false"
else
  log_info "proxy for box ENABLED, to disable use DISABLE_PROXY=true"
fi



#if ! check_command_installed yq; then
#	log_error "check failed, mandantory command yq is not in PATH, bailing out" 
#	has_error=true
#fi

if [ "${has_error}" == "true" ]; then
	exit 1
fi

#if file $(which yq) | grep -q Python; then
#	log_error "please install binary version of yq, not python script, downlord from: https://github.com/mikefarah/yq"
#	exit 1
#
#fi

#if check_command_installed yq && ! yq ".name" "$PROVISIONING_CONFIG_FULL_PATH" 2>&1 1>/dev/null; then
#	log_error "check failed, mandantory field .name in $PROVISIONING_CONFIG_FULL_PATH missing" 
#	exit 1
#fi
log_info "all tests passed"
exit 0
